// Prisma schema file: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//? =========== Example Model =========== 

model Greeting {
  id        String   @id @default(uuid())
  text      String
  sentiment String
  recipient String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

//? =========== ============= =========== 

// Initial build will link resources directly to a Clerk User Id.
// Profile table might be useful when building many to many relationships.
// Profile can be created using Clerk Webhooks, but testing this out on local host
// will require something like ngrok.

// Resources:
// https://clerk.com/docs/integration/webhooks
// https://dev.to/ibrarturi/how-to-test-webhooks-on-your-localhost-3b4f

model Profile {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  clerkId   String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

//? =========== ============= =========== 

model Photo {
  id String @id @default(uuid())

  // Optional 
  year        Int?
  title       String?
  location    String?
  category    String?
  description String?

  // File
  fileSize Int
  fileName String
  mimeType String

  // Size
  width       Int
  height      Int
  aspectRatio String

  // Color
  rgb           String
  hex           String
  isDark        Boolean
  hueDegree     Int
  dominantColor String

  // Meta
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  isUploaded Boolean  @default(false)
  isPublic   Boolean  @default(false)

  // Clerk Auth
  authorId   String
  authorName String

  favoriteRefs Favorite[]
}

model Favorite {
  id String @id @default(uuid())
  ownerId String

  photoId String
  photo Photo @relation(fields: [photoId], references: [id])
}
